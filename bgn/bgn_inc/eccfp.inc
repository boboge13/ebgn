/******************************************************************************
*
* Copyright (C) Chaoyong Zhou
* Email: bgnvendor@gmail.com 
* QQ: 2796796
*
*******************************************************************************/
#ifndef _ECCFP_INC
#define _ECCFP_INC

#include "findex.inc"

FUNC_ADDR_NODE g_eccfp_func_addr_list[ ] = {

{
/*func priority   */    PRIO_BEG,
/*func logic addr */    (UINT32)ecc_fp_print_module_status,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_print_module_status",
/*func index      */    FI_ecc_fp_print_module_status,
/*func ret type   */    e_dbg_void,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IO,},
/*func para type  */    {e_dbg_UINT32,e_dbg_LOG_ptr,},
/*func para val   */    0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_free_module_static_mem,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_free_module_static_mem",
/*func index      */    FI_ecc_fp_free_module_static_mem,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    1,
/*func para direct*/    {E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_start,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_start",
/*func index      */    FI_ecc_fp_start,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    6,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_BIGINT_ptr,e_dbg_ECFP_CURVE_ptr,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_FUNC_RAND_GEN,e_dbg_FUNC_HASH,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_end,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_end",
/*func index      */    FI_ecc_fp_end,
/*func ret type   */    e_dbg_void,
/*func para num   */    1,
/*func para direct*/    {E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_get_public_key,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_get_public_key",
/*func index      */    FI_ecc_fp_get_public_key,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_random_generator_default,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_random_generator_default",
/*func index      */    FI_ecc_fp_random_generator_default,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    1,
/*func para direct*/    {E_DIRECT_OUT,},
/*func para type  */    {e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_rnd_private_key,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_rnd_private_key",
/*func index      */    FI_ecc_fp_rnd_private_key,
/*func ret type   */    e_dbg_void,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_generate_keypair,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_generate_keypair",
/*func index      */    FI_ecc_fp_generate_keypair,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_ECC_KEYPAIR_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_encoding,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_encoding",
/*func index      */    FI_ecc_fp_encoding,
/*func ret type   */    e_dbg_int,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_UINT8_ptr,e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_decoding,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_decoding",
/*func index      */    FI_ecc_fp_decoding,
/*func ret type   */    e_dbg_void,
/*func para num   */    5,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_UINT32,e_dbg_UINT8_ptr,e_dbg_UINT32_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_encryption,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_encryption",
/*func index      */    FI_ecc_fp_encryption,
/*func ret type   */    e_dbg_void,
/*func para num   */    5,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_decryption,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_decryption",
/*func index      */    FI_ecc_fp_decryption,
/*func ret type   */    e_dbg_void,
/*func para num   */    5,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_do_hash_default,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_do_hash_default",
/*func index      */    FI_ecc_fp_do_hash_default,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT8_ptr,e_dbg_UINT32,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_signate,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_signate",
/*func index      */    FI_ecc_fp_signate,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    5,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_UINT8_ptr,e_dbg_UINT32,e_dbg_ECC_SIGNATURE_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECCFP,
/*func logic addr */    (UINT32)ecc_fp_verify,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ecc_fp_verify",
/*func index      */    FI_ecc_fp_verify,
/*func ret type   */    e_dbg_EC_BOOL,
/*func para num   */    5,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_UINT8_ptr,e_dbg_UINT32,e_dbg_ECC_SIGNATURE_ptr,},
/*func para val   */     0, 0, {0},
},
};

UINT32 g_eccfp_func_addr_list_len = sizeof(g_eccfp_func_addr_list)/sizeof(g_eccfp_func_addr_list[0]);

#endif/*_ECCFP_INC*/
