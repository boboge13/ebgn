/******************************************************************************
*
* Copyright (C) Chaoyong Zhou
* Email: bgnvendor@gmail.com 
* QQ: 312230917
*
*******************************************************************************/
#ifndef _ECFP_INC
#define _ECFP_INC

#include "findex.inc"

FUNC_ADDR_NODE g_ecfp_func_addr_list[ ] = {

{
/*func priority   */    PRIO_BEG,
/*func logic addr */    (UINT32)ec_fp_print_module_status,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_print_module_status",
/*func index      */    FI_ec_fp_print_module_status,
/*func ret type   */    e_dbg_void,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IO,},
/*func para type  */    {e_dbg_UINT32,e_dbg_LOG_ptr,},
/*func para val   */    0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_free_module_static_mem,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_free_module_static_mem",
/*func index      */    FI_ec_fp_free_module_static_mem,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    1,
/*func para direct*/    {E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_start,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_start",
/*func index      */    FI_ec_fp_start,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_BIGINT_ptr,e_dbg_ECFP_CURVE_ptr,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_end,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_end",
/*func index      */    FI_ec_fp_end,
/*func ret type   */    e_dbg_void,
/*func para num   */    1,
/*func para direct*/    {E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_curve_cmp,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_curve_cmp",
/*func index      */    FI_ec_fp_curve_cmp,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,e_dbg_ECFP_CURVE_ptr,e_dbg_ECFP_CURVE_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_cmp,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_cmp",
/*func index      */    FI_ec_fp_point_cmp,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_clone,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_clone",
/*func index      */    FI_ec_fp_point_clone,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_aff_clone,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_aff_clone",
/*func index      */    FI_ec_fp_point_aff_clone,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_is_infinit,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_is_infinit",
/*func index      */    FI_ec_fp_point_is_infinit,
/*func ret type   */    e_dbg_EC_BOOL,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_aff_is_infinit,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_aff_is_infinit",
/*func index      */    FI_ec_fp_point_aff_is_infinit,
/*func ret type   */    e_dbg_EC_BOOL,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_set_infinit,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_set_infinit",
/*func index      */    FI_ec_fp_point_set_infinit,
/*func ret type   */    e_dbg_void,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_aff_set_infinit,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_aff_set_infinit",
/*func index      */    FI_ec_fp_point_aff_set_infinit,
/*func ret type   */    e_dbg_void,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_neg,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_neg",
/*func index      */    FI_ec_fp_point_neg,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_aff_neg,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_aff_neg",
/*func index      */    FI_ec_fp_point_aff_neg,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_convert,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_convert",
/*func index      */    FI_ec_fp_point_convert,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_aff_convert,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_aff_convert",
/*func index      */    FI_ec_fp_point_aff_convert,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_is_on_curve,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_is_on_curve",
/*func index      */    FI_ec_fp_point_is_on_curve,
/*func ret type   */    e_dbg_EC_BOOL,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_double,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_double",
/*func index      */    FI_ec_fp_point_double,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_aff_double,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_aff_double",
/*func index      */    FI_ec_fp_point_aff_double,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_mix_add,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_mix_add",
/*func index      */    FI_ec_fp_point_mix_add,
/*func ret type   */    e_dbg_void,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_mix_sub,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_mix_sub",
/*func index      */    FI_ec_fp_point_mix_sub,
/*func ret type   */    e_dbg_void,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_AFF_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_AFF_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_add,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_add",
/*func index      */    FI_ec_fp_point_add,
/*func ret type   */    e_dbg_void,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_sub,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_sub",
/*func index      */    FI_ec_fp_point_sub,
/*func ret type   */    e_dbg_void,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_mul_naf,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_mul_naf",
/*func index      */    FI_ec_fp_point_mul_naf,
/*func ret type   */    e_dbg_void,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_mul_fix_base,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_mul_fix_base",
/*func index      */    FI_ec_fp_point_mul_fix_base,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_point_mul,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_point_mul",
/*func index      */    FI_ec_fp_point_mul,
/*func ret type   */    e_dbg_void,
/*func para num   */    4,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_EC_CURVE_POINT_ptr,e_dbg_BIGINT_ptr,e_dbg_EC_CURVE_POINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_compute_z,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_compute_z",
/*func index      */    FI_ec_fp_compute_z,
/*func ret type   */    e_dbg_void,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_compute_y,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_compute_y",
/*func index      */    FI_ec_fp_compute_y,
/*func ret type   */    e_dbg_EC_BOOL,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_x_is_on_curve,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_x_is_on_curve",
/*func index      */    FI_ec_fp_x_is_on_curve,
/*func ret type   */    e_dbg_EC_BOOL,
/*func para num   */    3,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_disc_compute,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_disc_compute",
/*func index      */    FI_ec_fp_disc_compute,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
{
/*func priority   */    PRIO_MD_ECFP,
/*func logic addr */    (UINT32)ec_fp_j_invar_compute,
/*func beg addr   */    0,
/*func end addr   */    0,
/*func addr offset*/    0,
/*func name       */    "ec_fp_j_invar_compute",
/*func index      */    FI_ec_fp_j_invar_compute,
/*func ret type   */    e_dbg_UINT32,
/*func para num   */    2,
/*func para direct*/    {E_DIRECT_IN,E_DIRECT_OUT,},
/*func para type  */    {e_dbg_UINT32,e_dbg_BIGINT_ptr,},
/*func para val   */     0, 0, {0},
},
};

UINT32 g_ecfp_func_addr_list_len = sizeof(g_ecfp_func_addr_list)/sizeof(g_ecfp_func_addr_list[0]);

#endif/*_ECFP_INC*/
